<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: David Michael Gregg | IndyRB.org]]></title>
  <link href="http://indyrb.github.io/blog/categories/david-michael-gregg/atom.xml" rel="self"/>
  <link href="http://indyrb.github.io/"/>
  <updated>2019-01-20T23:19:35-05:00</updated>
  <id>http://indyrb.github.io/</id>
  <author>
    <name><![CDATA[The Indianapolis Ruby Brigade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meetup November 28th, 2018]]></title>
    <link href="http://indyrb.github.io/posts/2018/11/28/meetup-nov28/"/>
    <updated>2018-11-28T21:00:00-05:00</updated>
    <id>http://indyrb.github.io/posts/2018/11/28/meetup-nov28</id>
    <content type="html"><![CDATA[<h3><a href="https://twitter.com/t27duck">David Michael Gregg</a> - The Physics of Software Design</h3>

<iframe width="100%" height="300" src="https://www.youtube.com/embed/qS48JJClmDk" frameborder="0" allowfullscreen></iframe>


<p>David Michael Gregg introduces Meilir Page-Jones&#8217; software design principle of &ldquo;connascence&rdquo; - Popularized formerly by Jim Weirich.</p>

<p>Learning how to write quality, maintainable code has been a question left to intuition, personal reinvention (after repeated failure), and the memorization of maxims such as &ldquo;Tell Don&rsquo;t Ask&rdquo;, &ldquo;Feature Envy&rdquo;, SOLID, et al.</p>

<p>But can we compare these maxims – these learned lessons – across paradigms, and arrive at a generalization which serves as a sort of guiding &ldquo;Grand Unified Theory of Software Development&rdquo; (Jim Weirich)?</p>

<p>Some of this work has been done, and the resulting concept and vocabulary is not only simple to explain (and immediately applicable) to early learners, but can serve as a metric for quantifying maintainability and refactoring opportunities at all levels of software architecture.</p>

<h3><a href="https://twitter.com/_swanson">Matt Swanson</a> - JavaScript Sprinkles: Avoiding client-side hell with view-over-the-wire</h3>

<iframe width="100%" height="300" src="https://www.youtube.com/embed/OUEBD7OBFNA" frameborder="0" allowfullscreen></iframe>


<p>A brief tour of building a speedy Rails app with Turbolinks and Stimulus.</p>

<p>Matt Swanson leads teams and build products for customers at SEP, a software product design and development agency in Carmel. He’s been using Ruby in some capacity since 2010. His favorite Ruby method is Array#compact.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meetup January 10th, 2018]]></title>
    <link href="http://indyrb.github.io/posts/2018/01/10/meetup-january10/"/>
    <updated>2018-01-10T21:00:00-05:00</updated>
    <id>http://indyrb.github.io/posts/2018/01/10/meetup-january10</id>
    <content type="html"><![CDATA[<h3><a href="http://linkedin.com/in/dmgregg/">David Michael Gregg</a> - The Ubiquitous Utility of Regular Expressions</h3>

<iframe width="100%" height="300" src="https://www.youtube.com/embed/zXh7RtLXPEQ" frameborder="0" allowfullscreen></iframe>


<p>David Michael Gregg walks through some basic RegEx features and use-cases in a sensible way.</p>

<p>You may not leave ready to extract a list of split infinitives from &ldquo;Moby Dick,&rdquo; but maybe you&rsquo;ll no longer see ASCII voodoo the next time you encounter someone&rsquo;s goofy email validation.</p>

<p>David Michael Gregg is an endangered species of The Iron Yard&rsquo;s Corporate Training team, where he teaches Angular 4 and Java&rsquo;s Spring Framework for Liberty Mutual. He is a graduate of TIY&rsquo;s Indianapolis academy in Ruby on Rails and a refugee from the world of IT management.</p>

<p>Reach him at <a href="http://linkedin.com/in/dmgregg/">http://linkedin.com/in/dmgregg/</a></p>
]]></content>
  </entry>
  
</feed>
